---
##
## Variables that control where build artifacts are places for scanning and testing:
## CI_REGISTRY
## CI_REGISTRY_IMAGE
## CI_REGISTRY_USER
## CI_REGISTRY_PASSWORD
##
## Variables that control where release artifacts go:
## NGC_REGISTRY
## NGC_REGISTRY_IMAGE
## NGC_REGISTRY_USER
## NGC_REGISTRY_TOKEN
## REGISTRY_TOKEN
## REGISTRY_USER
## REGISTRY_IMAGE
##

# We include the public gitlab CI definition to reuse the steps defined there
include:
  - local: '.common-ci.yml'

default:
  tags:
    - type/docker
    - docker/privileged
    - cnt
    - container-dev
    - os/linux

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - test
  - scan
  - deploy
  - release

.builddep_setup: &builddep_setup
  - apk add --no-cache bash findutils libmagic curl make git

.ci_login_setup: &ci_login_setup
  - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"

.pull_image: &pull_image
  - docker pull "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${VERSION}-${TARGET}"

.tag_image: &tag_image
  - docker tag "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${VERSION}-${TARGET}" "${IMAGE}:${VERSION}-${TARGET}"

# Note: The integration tests are disabled for this repository.
# Here we fail them, but allow the pipeline to continue.
skipped_integration:
  stage: test
  allow_failure: true
  script:
    - echo "Tests are not enabled"
    - exit 1

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan:
  stage: scan
  variables:
    REGISTRY: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHA}"
    IMAGE: "${IMAGE_NAME}"
  except:
    variables:
    - $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
    - $SKIP_SCANS
  before_script:
    - apk add --no-cache git
    - apk add --no-cache python3 python3-dev py3-pip py3-wheel libmagic
    - *ci_login_setup
    - *pull_image
    - *tag_image
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab-master.nvidia.com/sectooling/scanning/contamer.git
    - pip3 install -r contamer/requirements.txt
  script:
    - cd contamer
    - python3 contamer.py -ls --fail-on-non-os ${CONTAMER_SUPPRESS_VULNS:+--suppress-vulns ${CONTAMER_SUPPRESS_VULNS}} -- "${IMAGE_NAME}:${VERSION}-${TARGET}"

scan-ubuntu16:
  extends:
    - .scan
    - .target-ubuntu16
  
scan-ubuntu18:
  extends:
    - .scan
    - .target-ubuntu18

scan-ubi8:
  extends:
    - .scan
    - .target-ubi8

deploy:tag-ubuntu16:
  extends:
    - .deploy:tag
    - .target-ubuntu16

deploy:tag-ubuntu18:
  extends:
    - .deploy:tag
    - .target-ubuntu18

deploy:tag-ubi8:
  extends:
    - .deploy:tag
    - .target-ubi8

# .release forms the base of jobs in the release stage. These 
# build, tag, and release images to the relevant image registry
.release:
  stage: release
  only:
    - tags
  variables:
    VERSION: "${CI_COMMIT_TAG#v}"
  script:
    - 'echo Version: $VERSION ; [[ -n "$VERSION" ]] || exit 1'
    - *builddep_setup
    - *ci_login_setup
    - *pull_image
    - *tag_image
    - make push-${TARGET}

.release:ngc:
  extends: .release
  variables:
    IMAGE: ${NGC_REGISTRY_IMAGE}
  before_script:
    - docker login -u "${NGC_REGISTRY_USER}" -p "${NGC_REGISTRY_TOKEN}" "${NGC_REGISTRY}"
  
.release:dockerhub:
  extends: .release
  variables:
    IMAGE: ${REGISTRY_IMAGE}
  before_script:
    - docker login -u "${REGISTRY_USER}" -p "${REGISTRY_TOKEN}"

release:ngc-ubuntu16:
  extends:
    - .release:ngc
    - .target-ubuntu16

release:ngc-ubuntu18:
  extends:
    - .release:ngc
    - .target-ubuntu18

release:ngc-ubi8:
  extends:
    - .release:ngc
    - .target-ubi8

release:dockerhub-ubuntu16:
  extends:
    - .release:ngc
    - .target-ubuntu16

release:dockerhub-ubuntu18:
  extends:
    - .release:ngc
    - .target-ubuntu18

release:dockerhub-ubi8:
  extends:
    - .release:ngc
    - .target-ubi8

